# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Zowe CLI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      binary-type:
        description: Specify whether to use a `debug` or a `release` version of the binary
        default: debug
        required: false
      test-type:
        description: Specify whether to run tests using the `binary` or regular `nodejs` executable
        default: binary
        required: false
      macos-type:
        type: choice
        description: Run against x86-based MacOS (12), otherwise run against ARM64-based MacOS (14)
        default: macos-14
        options:
          - macos-12
          - macos-14

jobs:
  test:
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository) && !contains(github.event.head_commit.message, '[ci skip]')
    runs-on: ${{ matrix.os }}
    outputs:
      npm-resolutions: ${{ steps.npm-update.outputs.result }}

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
        os: 
          - windows-latest
          - ubuntu-latest
          - ${{ github.event.inputs.macos-type || 'macos-14'}}

    env:
      OS: ${{ matrix.os }}
      NODE: ${{ matrix.node-version }}
      NODE_OPTIONS: --max_old_space_size=4096

    timeout-minutes: 90

    concurrency:
      group: ${{ matrix.os }}-node-${{ matrix.node-version }}-ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true

    - name: Disable Lint Annotations
      run: |
        echo "::remove-matcher owner=eslint-compact::"
        echo "::remove-matcher owner=eslint-stylish::"

    - name: Get NPM Version
      id: npm-version
      run: echo "number=$(npm --version)" >> $GITHUB_OUTPUT

    - name: Install Dependencies
      run: npm ci

    - name: Use Original NPM Version
      id: original-npm-version
      run: npm install -g npm@${{ steps.npm-version.outputs.number || '9' }}

    - name: Install Rust toolchain
      id: install-rust
      if: github.event.inputs.test-type == 'binary' || github.event_name == 'push'
      uses: dtolnay/rust-toolchain@stable

    - name: Build Source
      id: build
      run: npm run build

    - name: Build Binary
      id: build-binary
      if: matrix.os != 'windows-latest' && (github.event.inputs.test-type == 'binary' || github.event_name == 'push')
      run: |
        cargo build --verbose ${{ github.event.inputs.binary-type == 'release' && '--release' || '' }} --manifest-path=zowex/Cargo.toml
        tar -cvzf zowe.tgz -C zowex/target/${{ github.event.inputs.binary-type == 'release' && 'release' || 'debug' }} zowe

    - name: Build Binary (Windows)
      id: build-windows-binary
      if: matrix.os == 'windows-latest' && (github.event.inputs.test-type == 'binary' || github.event_name == 'push')
      run: |
        cargo build --verbose ${{ github.event.inputs.binary-type == 'release' && '--release' || '' }} --manifest-path=zowex/Cargo.toml
        tar -cvzf zowe.tgz -C zowex/target/${{ github.event.inputs.binary-type == 'release' && 'release' || 'debug' }} zowe.exe
      env:
        RUSTFLAGS: "-Ctarget-feature=+crt-static"

    - name: Archive Binary
      if: github.event.inputs.test-type == 'binary' || github.event_name == 'push'
      id: upload-binary
      uses: actions/upload-artifact@v4
      with:
        name: zowe-${{ matrix.os }}.tgz
        path: zowe.tgz
        overwrite: true

    - name: Setup Binary in PATH
      if: github.event.inputs.test-type == 'binary' || github.event_name == 'push'
      id: setup-binary
      shell: bash
      run: |
        tar -xvzf zowe.tgz -C ./__tests__/__resources__/daemon_instances
        echo "${{ github.workspace }}/__tests__/__resources__/application_instances" >> $GITHUB_PATH

    - name: Test Rust EXE and zowe script
      id: test-exe-and-script
      if: ${{ steps.setup-binary.outcome == 'success' && (github.event.inputs.test-type == 'binary' || github.event_name == 'push') }}
      run: cargo test ${{ github.event.inputs.binary-type == 'release' && '--release' || '' }} --manifest-path=zowex/Cargo.toml -- --nocapture

    - name: Unit Tests
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: npm run test:unit

    - name: Unlock Keyring
      id: unlock-keyring
      if: ${{ always() && steps.build.outcome == 'success' && matrix.os == 'ubuntu-latest' }}
      uses: t1m0thyj/unlock-keyring@v1

    - name: Start Daemon
      id: start-daemon
      if: ${{ always() && steps.build.outcome == 'success' && (github.event.inputs.test-type == 'binary' || github.event_name == 'push') }}
      run: ./__tests__/__resources__/daemon_instances/zowe

    - name: Integration Tests (Native)
      if: ${{ always() && steps.build.outcome == 'success' && !(github.event.inputs.test-type == 'binary' || github.event_name == 'push') }}
      run: npm run test:integration

    - name: Integration Tests (Daemon)
      if: ${{ always() && steps.build.outcome == 'success' && (github.event.inputs.test-type == 'binary' || github.event_name == 'push') }}
      run: npm run test:integration -- --runInBand

    - name: Archive Results
      if: ${{ always() && steps.build.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.node-version }}-results
        path: __tests__/__results__/

    - name: Upload Results to Codecov
      if: ${{ always() && steps.build.outcome == 'success' }}
      uses: codecov/codecov-action@v4
      with:
        env_vars: OS,NODE
        token: ${{ secrets.CODECOV_TOKEN }}

  release:
    permissions:
      deployments: write
      issues: write
      pull-requests: write
      statuses: write
      
    if: github.event_name == 'push' && github.ref_protected
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
        ref: ${{ github.ref }}

    # Use Node 20. Currently the latest.
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Dependencies
      run: npm ci

    - name: Build Source
      run: npm run build

    - uses: zowe-actions/octorelease@v1
      env:
        GIT_COMMITTER_NAME: ${{ secrets.ZOWE_ROBOT_USER }}
        GIT_COMMITTER_EMAIL: ${{ secrets.ZOWE_ROBOT_EMAIL }}
        GIT_CREDENTIALS: x-access-token:${{ secrets.ZOWE_ROBOT_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        NPM_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        NPM_EMAIL: ${{ secrets.ZOWE_ROBOT_EMAIL }}
