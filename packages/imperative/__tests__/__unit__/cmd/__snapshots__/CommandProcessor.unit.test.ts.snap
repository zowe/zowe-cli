// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Command Processor invalidSyntaxNotification should log an invalid syntax notification with examples 1`] = `
"
Example:

 - Unripe Banana:

      $ fruit banana --banana-color green --is-spoiled false

Use \\"fruit bad syntax here --help\\" to view command description, usage, and options."
`;

exports[`Command Processor should allow us to formulate the help for a group 1`] = `
Object {
  "data": "Build help invoked!",
  "error": undefined,
  "exitCode": 0,
  "message": "The help was constructed for command: check.",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      66,
      117,
      105,
      108,
      100,
      32,
      104,
      101,
      108,
      112,
      32,
      105,
      110,
      118,
      111,
      107,
      101,
      100,
      33,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should build the help if requested 1`] = `"Build help invoked!"`;

exports[`Command Processor should build the help if requested 2`] = `
Object {
  "data": "Build help invoked!",
  "error": undefined,
  "exitCode": 0,
  "message": "The help was constructed for command: banana.",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      66,
      117,
      105,
      108,
      100,
      32,
      104,
      101,
      108,
      112,
      32,
      105,
      110,
      118,
      111,
      107,
      101,
      100,
      33,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should build the web help if requested 1`] = `""`;

exports[`Command Processor should build the web help if requested 2`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "The web help was launched for command: banana",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should detect blank root command supplied 1`] = `"Expect Error: Command Processor Error: No root command supplied."`;

exports[`Command Processor should detect cli args passed on the arguments object to invoke 1`] = `"Expect Error: Command Processor Error: invoke(): The command arguments object supplied does not contain an array of args."`;

exports[`Command Processor should detect invalid response format on invoke 1`] = `"Expect Error: Command Processor Error: invoke(): Response format must be one of the following: default,json"`;

exports[`Command Processor should detect missing ENV var prefix 1`] = `"Expect Error: Command Processor Error: No ENV variable prefix supplied."`;

exports[`Command Processor should detect missing arguments on invoke 1`] = `"Expect Error: Command Processor Error: invoke(): No command arguments supplied."`;

exports[`Command Processor should detect missing command arguments to validate 1`] = `"Expect Error: Command Processor Error: validate(): No command arguments supplied."`;

exports[`Command Processor should detect missing command response to validate 1`] = `"Expect Error: Command Processor Error: validate(): No response object supplied."`;

exports[`Command Processor should detect missing parameters on invoke 1`] = `"Expect Error: Command Processor Error: invoke(): No parameters supplied."`;

exports[`Command Processor should detect missing parameters to help 1`] = `"Expect Error: Command Processor Error: help(): No command response object supplied."`;

exports[`Command Processor should detect no command definition supplied 1`] = `"Expect Error: Command Processor Error: No command definition supplied."`;

exports[`Command Processor should detect no help generator supplied 1`] = `"Expect Error: Command Processor Error: No help generator supplied."`;

exports[`Command Processor should detect no profile manager factory supplied 1`] = `"Expect Error: Command Processor Error: No profile manager factory supplied."`;

exports[`Command Processor should detect no root command supplied 1`] = `"Expect Error: Command Processor Error: No root command supplied."`;

exports[`Command Processor should detect that no parameters have been supplied 1`] = `"Expect Error: Command Processor Error: No parameters supplied to constructor."`;

exports[`Command Processor should extract arguments not specified on invoke from a profile and merge with args 1`] = `
"yellow
"
`;

exports[`Command Processor should extract arguments not specified on invoke from a profile and merge with args 2`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      121,
      101,
      108,
      108,
      111,
      119,
      10,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should extract arguments not specified on invoke from a profile and merge with positional args 1`] = `
"yellow
"
`;

exports[`Command Processor should extract arguments not specified on invoke from a profile and merge with positional args 2`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      121,
      101,
      108,
      108,
      111,
      119,
      10,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should fail the command if syntax validation fails 1`] = `
"
Use \\"fruit banana --help\\" to view command description, usage, and options.
"
`;

exports[`Command Processor should fail the command if syntax validation fails 2`] = `""`;

exports[`Command Processor should fail the command if syntax validation fails 3`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 1,
  "message": "Command syntax invalid",
  "success": false,
}
`;

exports[`Command Processor should fail the creation of the command processor if a definition of type command has no handler 1`] = `"Expect Error: Command Processor Error: The definition supplied is of type \\"command\\", but no handler was specified."`;

exports[`Command Processor should formulate the full help command for a more complex command on syntax failure 1`] = `
"
Use \\"fruit check for banana --help\\" to view command description, usage, and options.
"
`;

exports[`Command Processor should formulate the full help command for a more complex command on syntax failure 2`] = `""`;

exports[`Command Processor should formulate the full help command for a more complex command on syntax failure 3`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 1,
  "message": "Command syntax invalid",
  "success": false,
}
`;

exports[`Command Processor should handle a strange error type being thrown 1`] = `
Object {
  "weird": "error",
}
`;

exports[`Command Processor should handle the handler rejecting with no messages 1`] = `
Object {
  "data": Object {},
  "error": Object {
    "msg": "Command Failed",
  },
  "exitCode": 1,
  "message": "Command failed",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "success": false,
}
`;

exports[`Command Processor should invoke the handler and process daemon response and then return success=true if the handler was successful 1`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should invoke the handler and process daemon response and use the environment file 1`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should invoke the handler and return success=true if the handler was successful 1`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should just include the command name if no args are present in the help when a syntax error occurs 1`] = `
"
Use \\"banana --help\\" to view command description, usage, and options.
"
`;

exports[`Command Processor should just include the command name if no args are present in the help when a syntax error occurs 2`] = `""`;

exports[`Command Processor should just include the command name if no args are present in the help when a syntax error occurs 3`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 1,
  "message": "Command syntax invalid",
  "success": false,
}
`;

exports[`Command Processor should use the value specified on the CLI option, if the argument is supplied in both CLI and profile 1`] = `
"green
"
`;

exports[`Command Processor should use the value specified on the CLI option, if the argument is supplied in both CLI and profile 2`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      103,
      114,
      101,
      101,
      110,
      10,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should use the value specified on the CLI positional option, if the argument is supplied in both CLI and profile 1`] = `
"green
"
`;

exports[`Command Processor should use the value specified on the CLI positional option, if the argument is supplied in both CLI and profile 2`] = `
Object {
  "data": Object {},
  "error": undefined,
  "exitCode": 0,
  "message": "",
  "stderr": Object {
    "data": Array [],
    "type": "Buffer",
  },
  "stdout": Object {
    "data": Array [
      103,
      114,
      101,
      101,
      110,
      10,
    ],
    "type": "Buffer",
  },
  "success": true,
}
`;

exports[`Command Processor should validate the syntax if requested 1`] = `
Object {
  "valid": true,
}
`;
